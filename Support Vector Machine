import pandas
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
colms = ['']
excel_data_df = pandas.read_excel('Basin Data.xlsx', sheet_name='Sheet1')


excel_data_df

excel_data_df[excel_data_df['Observed flow'].isna()]

excel_data_df.describe()


X = excel_data_df.iloc[:, 0:-1]
X = X.drop(['Date'], axis=1)
y = excel_data_df.iloc[:, -1]

X
y

pip install scikit-learn
pip install sklearn-extensions

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)


X_train = X_train.fillna(X_train.mean())
X_test = X_test.fillna(X_train.mean())

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.svm import LinearSVR
lm = LinearSVR()
lm.fit(X_train, y_train)
y_pred = lm.predict(X_test)

elm = LinearSVR().fit(X, y)
y_pred = elm.predict(X_test)
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
print('Mean squared error:', mse)


(y_test, y_pred)


from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
y_pred = elm.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("MSE: ", mse)
print("RMSE: ", rmse)
print("MAE: ", mae)
print("R2 score: ", r2)
